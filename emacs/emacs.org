#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Package System Setup

#+begin_src emacs-lisp

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;;initialize use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

#+end_src


* Keybindings

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-create-definer ah/leader-keys
      :keymaps '(normal insert visual emacs treemacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (ah/leader-keys
      "f"  '(:ignore t :which-key "toggles")
      "ft" '(counsel-load-theme :which-key "choose theme")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-j") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Stop Making Backups

#+begin_src emacs-lisp

(setq make-backup-files nil)

#+end_src

#+RESULTS:

* UI Configuration
  
#+begin_src emacs-lisp

    (setq inhibit-startup-message t)

    (scroll-bar-mode -1) ;;disable visible scrollbar
    (tool-bar-mode -1)   ;;disable the toolbar
    (tooltip-mode -1)    ;;disable tooltips
    (set-fringe-mode 10) ;;give some breathing room
    (menu-bar-mode -1)   ;;disable the menu bar

    ;;visible bell setup
    (setq visible-bell t)

    ;;setting line numbers

    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;;disable line numbers for some modes
    (dolist (mode '(org-mode-hook
                    term-mode-hook
                    eshell-mode-hook
                    treemacs-mode-hook
                    shell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; disables trucate line in prog mode
  (add-hook 'prog-mode-hook (lambda () (toggle-truncate-lines 1)))

#+end_src

** Font Configuration

#+begin_src emacs-lisp

  ;;font and font size
  (set-face-attribute 'default nil :font "VictorMono Nerd Font Mono" :height 150)

#+end_src

** Theme

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-nord t))

#+end_src

** Better Modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which-Key

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;;dont start searches with ^

#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling

#+begin_src emacs-lisp

  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (ah/leader-keys
    "fs" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Treemacs

#+begin_src emacs-lisp

  (use-package treemacs
    :ensure t)

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (ah/leader-keys
    "fd"  '(treemacs :which-key "toggle treemacs"))

#+end_src


* Development

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))


#+end_src

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;(use-package forge)

#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Commenter
#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Yasnippet

#+begin_src emacs-lisp

(use-package yasnippet
  :hook (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all))

#+end_src

** Smart Parens

#+begin_src emacs-lisp

  (use-package smartparens
    :hook (prog-mode . smartparens-mode))

#+end_src

** Rainbow Mode

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           js2-mode))

#+end_src

** LSP

*** Language Servers

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deffered)
    :init
    (setq lsp-keymap-prefix "C-c l") ;;or C-l , s-l
    :config
    (lsp-enable-which-key-integration t))

#+end_src

*** LSP UI

#+begin_src emacs-lisp

    (use-package lsp-ui
      :commands lsp-ui-mode
      :hook (python-mode . lsp-deffered))

#+end_src

*** LSP Ivy

#+begin_src emacs-lisp

(use-package lsp-ivy)

#+end_src

*** LSP Treemacs

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

*** Flycheck

#+begin_src emacs-lisp

  (use-package flycheck
    :ensure t
    :defer t
    :hook (lsp-mode . flycheck-mode))

#+end_src

*** Company Mode

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

*** Treesitter

#+begin_src emacs-lisp

    (use-package tree-sitter)
    (use-package tree-sitter-langs)
    (use-package tree-sitter-indent
      :after treesitter
      :hook (lsp-mode . tree-sitter-indent-mode))
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)


#+end_src

*** Python

#+begin_src emacs-lisp

  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred


#+end_src
 
*** C

#+begin_src emacs-lisp

  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)

#+end_src

*** Java

#+begin_src emacs-lisp

  (use-package lsp-java
    :ensure t
    :hook (java-mode-hook . (lambda ()
                              (require 'lsp-java)
                              (lsp))))


#+end_src

*** Lua

#+begin_src emacs-lisp

  (use-package lua-mode)

#+end_src

** Dap

#+begin_src emacs-lisp

  (use-package dap-mode)

#+end_src

* Org Mode

** Basic Configuration

#+begin_src emacs-lisp

  (use-package olivetti)
  (defun ah/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (olivetti-mode 1)
    (olivetti-set-width 100))

  (use-package org
    :hook (org-mode . ah/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          org-agenda-start-with-log-mode t
          org-log-done 'time
          org-log-into-drawer t
          org-agenda-files '("~/Dropbox/org/tasks.org")))

  (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (with-eval-after-load 'org-faces
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))


  (with-eval-after-load 'org-faces
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Better Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; (use-package org-bullets
  ;;   :after org
  ;;   :hook (org-mode . org-bullets-mode)
  ;;   :custom
  ;;   (org-bullets-bullet-list '("" "" "" "" "" "" "")))

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun ah/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ah/org-babel-tangle-config)))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

      (org-babel-do-load-languages
       'org-babel-load-languages '((python . t)
                                   (emacs-lisp . t)
                                   (C . t)))
      (setq org-confirm-babel-evaluate nil
            org-src-tab-acts-natively t)

#+end_src

** Babel Autocomplete

#+begin_src emacs-lisp

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cl" . "src C"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src C++"))

#+end_src
